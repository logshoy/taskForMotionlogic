{"version":3,"sources":["forminput/forminput.module.css","store/actions/input.js","store/actions/actionsTypes.js","forminput/forminput.js","App.js","serviceWorker.js","store/reducers/input.js","store/reducers/rootReducer.js","index.js"],"names":["module","exports","cityChooseLocal","Array","from","JSON","parse","window","localStorage","getItem","fetchCity","dispatch","type","response","cityJSON","citys","Object","keys","forEach","city","ad","includes","name","push","fetchCityEnd","e","console","log","addCityLocal","addCity","localStorageSet","removeCityLocal","removeCity","forminput","renderCity","arrCity","props","sort","filter","toLowerCase","startsWith","search","length","className","classes","listCity","map","onClick","addCityHandler","bind","this","searchInput","container","form","input","value","placeholder","onChange","target","chooseList","choose","key","chooseCity","removeCityHandler","React","Component","connect","state","cityChoose","App","Boolean","location","hostname","match","initialState","combineReducers","action","setItem","stringify","concat","element","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e887c44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"forminput_container__3hSbI\",\"form\":\"forminput_form__3dk5Q\",\"listCity\":\"forminput_listCity__1dK2a\",\"chooseList\":\"forminput_chooseList__uPJo7\",\"chooseCity\":\"forminput_chooseCity__2Tt05\",\"input\":\"forminput_input__117ok\",\"city\":\"forminput_city__36I7F\"};","import {FETCH_CITY_START, FETCH_CITY_END , ADD_CITY, REMOVE_CITY, SEARCH_INPUT, LOCALSTORAGE_SET, LOCALSTORAGE_GET} from './actionsTypes'\r\nimport cityJSON from '../../russian-cities.json'\r\n\r\nlet cityChooseLocal = Array.from(JSON.parse(window.localStorage.getItem('cityChoose')))\r\n\r\nexport function fetchCity() {\r\n    return dispatch => {\r\n        dispatch(fetchCityStart())\r\n        try {\r\n            const response = cityJSON\r\n            const citys = []\r\n            Object.keys(response).forEach(city => {\r\n                const ad = response[city]\r\n                if (!cityChooseLocal.includes(ad.name)) citys.push(ad.name)\r\n            })\r\n            dispatch(fetchCityEnd(citys))\r\n            dispatch(localStorageGet())\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport function addCityLocal(city) {\r\n    return dispatch => {\r\n        dispatch(addCity(city))\r\n        \r\n        dispatch(localStorageSet())\r\n    }\r\n}\r\n\r\nexport function removeCityLocal(city) {\r\n    console.log('gg')\r\n    return dispatch => {\r\n        dispatch(removeCity(city))\r\n        dispatch(localStorageSet())\r\n    }\r\n}\r\n\r\nexport function localStorageSet() {\r\n    return {\r\n        type: LOCALSTORAGE_SET\r\n    }\r\n}\r\n\r\nexport function localStorageGet() {\r\n    return {\r\n        type: LOCALSTORAGE_GET\r\n    }\r\n}\r\n\r\nexport function fetchCityStart() {\r\n    return {\r\n        type: FETCH_CITY_START\r\n    }\r\n}\r\n\r\nexport function fetchCityEnd(citys) {\r\n    return {\r\n        type: FETCH_CITY_END,\r\n        citys\r\n    }\r\n}\r\n\r\nexport function searchInput(search) {\r\n    return {\r\n        type: SEARCH_INPUT,\r\n        search\r\n    }\r\n}\r\n\r\nexport function addCity(city) {\r\n    return {\r\n        type: ADD_CITY,\r\n        city\r\n    }\r\n}\r\n\r\nexport function removeCity(city) {\r\n    return {\r\n        type: REMOVE_CITY,\r\n        city\r\n    }\r\n}","export const FETCH_CITY_START = 'FETCH_CITY_START'\r\nexport const FETCH_CITY_END = 'FETCH_CITY_END'\r\nexport const ADD_CITY = 'ADD_CITY'\r\nexport const REMOVE_CITY = 'REMOVE_CITY'\r\n\r\nexport const SEARCH_INPUT = 'SEARCH_INPUT'\r\nexport const LOCALSTORAGE_SET = 'LOCALSTORAGE_SET'\r\nexport const LOCALSTORAGE_GET = 'LOCALSTORAGE_GET'\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classes from './forminput.module.css'\r\nimport {fetchCity, addCityLocal, removeCityLocal, searchInput} from '../store/actions/input';\r\n\r\n\r\nclass forminput extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchCity()\r\n    }\r\n\r\n    addCityHandler(city) {\r\n        console.log(city)\r\n        this.props.addCityLocal(city)\r\n        this.props.searchInput('')\r\n    }\r\n\r\n    removeCityHandler(city) {\r\n        this.props.removeCityLocal(city)\r\n    }\r\n\r\n    renderCity = () => { \r\n    const arrCity = this.props.city\r\n        .sort()\r\n        .filter(city => city.toLowerCase().startsWith(this.props.search.toLowerCase()))\r\n        if (this.props.search.length >= 3 && arrCity.length > 0) {\r\n        return (\r\n            <ul className={classes.listCity}> { arrCity\r\n                .map(city => {               \r\n                    return (\r\n                    <li onClick={this.addCityHandler.bind(this, city)}>\r\n                            {city}\r\n                    </li>\r\n                    )\r\n                })}\r\n            </ul>)\r\n        }\r\n    }        \r\n\r\n\r\n    render() {\r\n\r\n        const dataSearch = e => {\r\n            const value = e.target.value.toLowerCase();\r\n                this.props.searchInput(value)\r\n        }\r\n\r\n        return( \r\n            <div className={classes.container}>\r\n                <h1>Форма с инпутом для города</h1>\r\n                <form className={classes.form}>\r\n                    <h2>Введите город</h2>\r\n                    <input\r\n                        className={classes.input}\r\n                        value = {this.props.search}\r\n                        type=\"text\"\r\n                        placeholder=\"Введите город\"\r\n                        onChange={dataSearch}\r\n                    />\r\n                    { this.renderCity() } \r\n                    <h2>Выбранные города</h2>\r\n                    <div className={classes.chooseList}>\r\n                        {this.props.choose.map(city => {\r\n                            return(\r\n                                <span\r\n                                key={city}\r\n                                className={classes.chooseCity}\r\n                                >\r\n                                    {city}\r\n                                    <a onClick={this.removeCityHandler.bind(this, city)}>x</a>\r\n                                </span>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        city: state.input.city,\r\n        search: state.input.search,\r\n        choose: state.input.cityChoose\r\n    }\r\n}\r\n\r\nfunction mapDispathToProps(dispatch) {\r\n    return {\r\n        fetchCity: () => dispatch(fetchCity()),\r\n        addCityLocal: city => dispatch(addCityLocal(city)),\r\n        removeCityLocal: city => dispatch(removeCityLocal(city)),\r\n        searchInput: value => dispatch(searchInput(value))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispathToProps)(forminput)\r\n\r\n","import React from 'react';\r\nimport Forminput from './forminput/forminput'\r\n// import Search from './forminput/search'\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>App</h1>\r\n      {/* <Search /> */}\r\n      <Forminput />\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {FETCH_CITY_START, FETCH_CITY_END, ADD_CITY, REMOVE_CITY, SEARCH_INPUT, LOCALSTORAGE_SET, LOCALSTORAGE_GET } from '../actions/actionsTypes'\r\n\r\nlet cityChooseLocal = Array.from(JSON.parse(window.localStorage.getItem('cityChoose')))\r\n\r\nconst initialState = {\r\n    city: [],\r\n    search : '',\r\n    cityChoose: []\r\n}\r\n\r\nexport default function cityReducer(state = initialState, action) {\r\n    if(action.type === LOCALSTORAGE_SET) window.localStorage.setItem('cityChoose', JSON.stringify(state.cityChoose))\r\n    switch(action.type) {\r\n        case FETCH_CITY_START: \r\n            return {\r\n                ...state \r\n            }\r\n        case FETCH_CITY_END: \r\n            return {\r\n                ...state ,city: action.citys\r\n            }\r\n        case SEARCH_INPUT:\r\n            return {\r\n                ...state, search: action.search\r\n            }\r\n        case LOCALSTORAGE_GET:\r\n            return {\r\n                ...state, cityChoose: cityChooseLocal\r\n            }\r\n        case ADD_CITY: \r\n            return {\r\n                ...state, \r\n                cityChoose: state.cityChoose.concat(action.city),\r\n                city: state.city.filter(element => element !== action.city)\r\n            }\r\n        case REMOVE_CITY: \r\n            return {\r\n            ...state, \r\n            cityChoose: state.cityChoose.filter(element => element !== action.city),\r\n            city: state.city.concat(action.city)\r\n        }\r\n        default: \r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport inputReducer from './input'\r\n\r\nexport default combineReducers({\r\n    input: inputReducer,\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore, compose, applyMiddleware} from 'redux'\r\nimport {Provider} from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './store/reducers/rootReducer.js'\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n)\r\n\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>\r\n)\r\n\r\nReactDOM.render(\r\n    app,\r\n  document.getElementById('root')\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}